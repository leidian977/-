import numpy as np
class LinearRegression:
    
    def fit(self,x,y):
        self.x=x
        self.y=y
        intercept = np.ones((x.shape[0], 1))  # 初始化截距为 1
        self.x = np.concatenate((intercept, self.x), axis=1)
        #w = (x.T * x).I * x.T * y
        inverse=np.linalg.inv(np.dot(self.x.T,self.x)) 
        self.w = np.dot(np.dot(inverse,self.x.T),y) 
        #self.w = (self.x.T * self.x).I * self.x.T * self.y #最小二乘法的矩阵
        self.intercept_=self.w[0]
        self.coef_ =self.w[1:]
        return self.w
    def predict(self,x1):
        return self.intercept_+np.dot(x1,self.coef_)
 
 
#验证
import pandas as pd
from sklearn.model_selection import train_test_split 
from sklearn.metrics import mean_squared_error

df = pd.read_csv(
    "https://labfile.oss.aliyuncs.com/courses/1081/course-12-data.csv", header=0)  # 加载数据集

X_train, X_test, y_train, y_test = train_test_split(df.iloc[:,:2], df['Y'], test_size=0.2, random_state=42)

model=LinearRegression()
model.fit(X_train,y_train)
y=model.predict(X_test)
mean_squared_error(y_test,y)
0.22156358212802882
