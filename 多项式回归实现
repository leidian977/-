import numpy as np
from scipy.optimize import leastsq
class PolynomialFeatures:
    def __init__(self,n,x,y):
        
        self.n=n   #次数
        self.y=y.values.ravel()
        self.x=x.values.ravel()

     #损失函数
    def err_func(self,p,x,y):
        ret =np.poly1d(p)(self.x) - self.y
        return ret
    def fit(self):
        Pinit= np.random.randn(self.n)
        parameters = leastsq(self.err_func, Pinit, args=(np.array(self.x), np.array(self.y)))
        return parameters[0]
    #预测
    def predict(self,x_test):
        p=np.poly1d(self.fit())
        return p(x_test)

#验证
import pandas as pd
from sklearn.model_selection import train_test_split 
from sklearn.metrics import mean_squared_error

df = pd.read_csv(
    "https://labfile.oss.aliyuncs.com/courses/1081/course-6-vaccine.csv", header=0)  # 加载数据集
    
X_train, X_test, y_train, y_test = train_test_split(df.iloc[:,:1], df['Values'], test_size=0.2, random_state=42)

model=PolynomialFeatures(2,X_train,y_train)
model.fit()
y=model.predict(X_test)

mean_squared_error(y_test,y)
9.310939227097645
